// <auto-generated />
using System;
using ChatRoomTest.MyContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChatRoomTest.Migrations
{
    [DbContext(typeof(ChatRoomContext))]
    [Migration("20230515185411_AddTimeOfmessageToMessageModel")]
    partial class AddTimeOfmessageToMessageModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChatRoomTest.Models.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("FkFromUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("FkToUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("Like")
                        .HasColumnType("bit");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("TimeOffset")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2023, 5, 15, 18, 54, 10, 898, DateTimeKind.Unspecified).AddTicks(709), new TimeSpan(0, 0, 0, 0, 0)));

                    b.HasKey("Id");

                    b.HasIndex("FkFromUserId");

                    b.HasIndex("FkToUserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ChatRoomTest.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChatRoomTest.Models.UserRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approve")
                        .HasColumnType("bit");

                    b.Property<long>("FkUserAId")
                        .HasColumnType("bigint");

                    b.Property<long>("FkUserBId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FkUserBId");

                    b.HasIndex("FkUserAId", "FkUserBId")
                        .IsUnique();

                    b.ToTable("UserRelations");
                });

            modelBuilder.Entity("ChatRoomTest.Models.Message", b =>
                {
                    b.HasOne("ChatRoomTest.Models.User", "FromUser")
                        .WithMany("FromMessages")
                        .HasForeignKey("FkFromUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatRoomTest.Models.User", "ToUser")
                        .WithMany("ToMessages")
                        .HasForeignKey("FkToUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("ChatRoomTest.Models.UserRelation", b =>
                {
                    b.HasOne("ChatRoomTest.Models.User", "UserA")
                        .WithMany("UserARelations")
                        .HasForeignKey("FkUserAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChatRoomTest.Models.User", "UserB")
                        .WithMany("UserBRelations")
                        .HasForeignKey("FkUserBId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserA");

                    b.Navigation("UserB");
                });

            modelBuilder.Entity("ChatRoomTest.Models.User", b =>
                {
                    b.Navigation("FromMessages");

                    b.Navigation("ToMessages");

                    b.Navigation("UserARelations");

                    b.Navigation("UserBRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
